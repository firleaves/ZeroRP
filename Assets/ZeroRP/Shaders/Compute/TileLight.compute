#pragma kernel TileLight

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Assets/ZeroRP/Shaders/Library/UnityInput.hlsl"


#define MAX_LIGHT_COUNT 1024
#define THREAD_NUM_X 16
#define THREAD_NUM_Y 16
#define THREAD_COUNT 256


Texture2D _DepthTex;


//近平面左下角
float3 _CameraNearPlaneLB;
//tile基向量
float3 _CameraNearBasis;

float4 _DeferredTileParams;
uint _PointLightCount;
uint _maxLightPerTile;


groupshared uint minDepthUint;
groupshared uint maxDepthUint;
groupshared uint tileVisibleLightCount = 0;
groupshared uint tileVisibleLightIndices[MAX_LIGHT_COUNT];
groupshared float tileDepthSliceInterval = 1;
groupshared uint gemoDepthMask = 0;


StructuredBuffer<float4> _PointLightPosRadiusBuffer;

//每个tile内灯光数量
RWStructuredBuffer<uint> _RWTileLightsArgsBuffer;
//储存每个tile可见灯光索引
RWStructuredBuffer<uint> _RWTileLightsIndicesBuffer;


bool IntersectSide(float3 p1, float3 p2, float4 lightSphere)
{
    float3 n = -normalize(cross(p1, p2));
    float d = dot(lightSphere.xyz, n);
    return d < lightSphere.w;
}

//tileFrustumCorners是tile视锥minDepth平面的4个顶点
bool Intersect(float3 tileFrustumCorners[4], float4 lightSphere, float tileDepthMin, float tileDepthMax)
{
    float radius = lightSphere.w;
    float lightDepthMin = lightSphere.z - radius;
    float lightDepthMax = lightSphere.z + radius;
    if (lightDepthMin > tileDepthMax || lightDepthMax < tileDepthMin)
    {
        return false;
    }


    return IntersectSide(tileFrustumCorners[0], tileFrustumCorners[1], lightSphere)
        && IntersectSide(tileFrustumCorners[1], tileFrustumCorners[2], lightSphere)
        && IntersectSide(tileFrustumCorners[2], tileFrustumCorners[3], lightSphere)
        && IntersectSide(tileFrustumCorners[3], tileFrustumCorners[0], lightSphere);
}


[numthreads(THREAD_NUM_X, THREAD_NUM_Y, 1)]
void TileLight(uint3 dispatchThreadId : SV_DispatchThreadID, uint3 groupId:SV_GROUPID, uint groupIndex:SV_GROUPINDEX)
{
    //stage 1. 初始化groupshared变量
    if (groupIndex == 0)
    {
        minDepthUint = 0xFFFFFFFF;
        maxDepthUint = 0;
        tileVisibleLightCount = 0;
        gemoDepthMask = 0;
    }
    GroupMemoryBarrierWithGroupSync();

    // bool inScreen = (float)dispatchThreadId.x < _ScreenParams.x && (float)dispatchThreadId.y < _ScreenParams.y;


    float depth = _DepthTex[dispatchThreadId.xy].r;
    #if UNITY_REVERSED_Z
    depth = 1.0 - depth;
    #endif
    float viewZ = LinearEyeDepth(depth, _ZBufferParams);
    uint viewZUint = asuint(viewZ);

    InterlockedMin(minDepthUint, viewZUint);
    InterlockedMax(maxDepthUint, viewZUint);

    // 阻止组中所有线程的执行，直到所有组共享访问都已完成并且组中的所有线程都已到达此调用。
    GroupMemoryBarrierWithGroupSync();

    float tileDepthMin = asfloat(minDepthUint);
    float tileDepthMax = asfloat(maxDepthUint);

    //计算每个tile内的视锥体
    //一个pass处理16x16=256盏灯
    uint2 tileId = groupId.xy;
    //_ProjectionParams.y   nearPlaneZ
    float tileDepthMinScale = tileDepthMin / _ProjectionParams.y;
    //最近深度的视锥体四个点
    float3 tileNearFrustumCorners[4];
    //tile 左下角
    tileNearFrustumCorners[0] = tileDepthMinScale * (_CameraNearPlaneLB + tileId.x * float3(_CameraNearBasis.x, 0, 0) + tileId.y * float3(0, _CameraNearBasis.y, 0));
    //右下角
    tileNearFrustumCorners[1] = tileNearFrustumCorners[0] + float3(_CameraNearBasis.x, 0, 0) * tileDepthMinScale;
    // 右上角
    tileNearFrustumCorners[2] = tileNearFrustumCorners[0] + _CameraNearBasis * tileDepthMinScale;
    // 左上角
    tileNearFrustumCorners[3] = tileNearFrustumCorners[0] + float3(0, _CameraNearBasis.y, 0) * tileDepthMinScale;


    //构建可见灯光列表
    uint count = ceil((float)_PointLightCount / THREAD_COUNT);

    for (uint i = 0; i < count; i++)
    {
        uint lightIndex = i * THREAD_COUNT + groupIndex;
        if (lightIndex < _PointLightCount)
        {
            float4 lightSphere = _PointLightPosRadiusBuffer[lightIndex];

            lightSphere.xyz = mul(unity_WorldToCamera, float4(lightSphere.xyz, 1));

            if (Intersect(tileNearFrustumCorners, lightSphere, tileDepthMin, tileDepthMax))
            {
                uint offset;
                InterlockedAdd(tileVisibleLightCount, 1, offset);
                tileVisibleLightIndices[offset] = lightIndex;
            }
        }
    }
    GroupMemoryBarrierWithGroupSync();

    //获得tile内灯光索引
    // _DeferredTileParams.z = tileCountX
    uint tileIndex = tileId.y * _DeferredTileParams.z + tileId.x;
    if (groupIndex == 0)
    {
        _RWTileLightsArgsBuffer[tileIndex] = tileVisibleLightCount;
    }
    if (groupIndex < tileVisibleLightCount && groupIndex < _maxLightPerTile)
    {
        uint visibleLightIndex = tileVisibleLightIndices[groupIndex];
        _RWTileLightsIndicesBuffer[tileIndex * _maxLightPerTile + groupIndex] = visibleLightIndex;
    }
}
